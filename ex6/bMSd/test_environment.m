clear all; close all; clc;

SP = model_ABB;

tf=10; %final simulation time
dt=5*1e-3; %simulation time step - needs to be fairly small since large contact forces due to stiff environments might be created 
gravity=[0;0;-9.81]; %gravity vector

% generate initial configuration
SV = System_Variables(SP);
SV = calc_pos(SP,SV); %need to call calc_pos for the visualizer

%create an instance of the multi body system visualizer
visualizer=MBSVisualizer(SP,SV);

%create an instance of a (planar) environment
v=[0.6;0;0.6]; %envrionment position
R_v=ry(pi/4); %environment orientation (x-axis points along environment plane normal)
environment=Environment([R_v v; zeros(1,3) 1]); %environment is instantiated with a homogeneous transform

%visualization tweaks
axis([-0.4 1.6 -1.0 1.0 -0.6 1.4]);
pbaspect([1 1 1]);

t=0:dt:tf;
for i=1:length(t)
    %calculate the end-effector Jacobian
    J_e = calc_Je(SP,SV,SP.bN,SP.bP);
	
	%calculate end-effector position 
    [p_e,~] = fk_e(SP,SV,SP.bN,SP.bP);
		
	%calculate end-effector velocity and Jacobian derivative (not used in
	%this example)
	dJ_e = calc_dJe(SP,SV,SP.bN,SP.bP);
    v_e=J_e*SV.dq;
	
    %get the equation of motion matrices from the manipulator (not used in
    %this example)
    H = calc_hh(SP,SV); H=H(7:end,7:end);
    N = r_ne(SP,SV,gravity); N=N(7:end);
    
    %get the contact force and  force rate from the environment; contact
    %force is given w.r.t. the query point and expressed in the world frame
    [f_v df_v]=getContactForce(environment,p_e,v_e(1:3),dt); 
    
    %compute the equivalent external torques generated by the contact force
    tau_ext=J_e(1:3,:)'*f_v;

    SV.tau=tau_ext; %set the external torques
    SV = int_rk4(SP,SV,dt,gravity); %call forward dynamics and integrate
        
    visualizer.update(SP,SV);% update the visualization (needs calc_pos to be called before, which happens in int_rk4 in this example)
end
%EOF